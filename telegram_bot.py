
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import random

import os
TOKEN = os.getenv("TOKEN")

user_data = {}

def pluralizace_attempts(n):
    if n == 1:
        return "–æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É"
    elif 2 <= n % 10 <= 4 and n not in [12,13,14]:
        return f"{n} –ø–æ–ø—ã—Ç–∫–∏"
    else:
        return f"{n} –ø–æ–ø—ã—Ç–æ–∫"


# ---1. –ò–≥—Ä–∞ –≥–¥–µ —è —É–≥–∞–¥—ã–≤–∞—é —á–∏—Å–ª–æ ---
async def player_guess_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    number = random.randint(1, 100)
    user_data[update.effective_user.id] = {"game": guess_number, "number": number, "attempts": 0}
    await update.message.reply_text("üéØ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –£–≥–∞–¥–∞–π!") # H√°dej, ƒç√≠slo jsem si vybral od 1 do 100!

# ---2. –ò–≥—Ä–∞ –≥–¥–µ –±–æ—Ç —É–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ ---
async def play_bot_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update._effective_user.id] = {"game": "bot_guess", "low": 1, "high": 100, "attempts": 0}
    await make_bot_guess(update)

async def make_bot_guess(update: Update):
    user_id = update.effective_user.id
    data = user_data[user_id]
    guess = (data["low"] + data["high"]) // 2
    data["guess"] = guess
    data["attempts"] += 1
    await update.message.reply_text(f"ü§ñ –Ø –¥—É–º–∞—é: {guess}. –ù–∞–ø–∏—à–∏ `–±–æ–ª—å—à–µ`, `–º–µ–Ω—å—à–µ` –∏–ª–∏ `—Ä–∞–≤–Ω–æ`")

# ---3. –ß–∏—Å–ª–æ–≤–æ–π –±–æ–π ---
async def play_battle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    your_number = random.randint(1, 100)
    bot_number = random.randint(1, 100)
    msg = f"‚öîÔ∏è –¢—ã: {your_number} | –ë–æ—Ç: {bot_number}\n"
    if your_number > bot_number:
        msg += "üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª!"
    elif your_number < bot_number:
        msg += "üòî –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!"
    else:
        msg += "ü§ù –ù–∏—á—å—è!"

# ---4. –í–∑–ª–æ–º–∞–π –ø–∞—Ä–æ–ª—å --- 
async def play_password_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = "".join([str(random.randint(0, 9))  for _ in range(4)])
    user_data[update.effective_user.id] = {"game": "password", "password": password, "attempts": 0}
    await update.message.reply_text("üîê –Ø –∑–∞–≥–∞–¥–∞–ª 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")

def check_password(guess, password):
    correct_pos = sum(a == b for a, b in zip(guess, password))
    correct_digits = sum(min(guess.count(d), password.count(d)) for d in set(guess)) - correct_pos
    return correct_digits, correct_pos

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async def atart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    Keyboard = [["üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", "üß† –ë–æ—Ç —É–≥–∞–¥—ã–≤–∞–µ—Ç"], ["‚öîÔ∏è –ß–∏—Å–ª–æ–≤–æ–π –±–æ–π", "üîê –í–∑–ª–æ–º–∞–π –ø–∞—Ä–æ–ª—å"]]
    reply_markup = ReplyKeybordMarkup(Keyboard, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í–æ —á—Ç–æ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å?", reply_markup=reply_markup)

# --- –û–±—Ä–æ–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã ---
async def handle_game_choise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ":
        await player_guess_number(update, context)
    elif text == "üß† –ë–æ—Ç —É–≥–∞–¥—ã–≤–∞–µ—Ç":
        await play_bot_guess(update, context)
    elif text == "‚öîÔ∏è –ß–∏—Å–ª–æ–≤–æ–π –±–æ–π":
        await play_battle(update, context)
    elif text == "üîê –í–∑–ª–æ–º–∞–π –ø–∞—Ä–æ–ª—å":
        await play_password_game(update, context)
    else:
        await handle_guess(update, context)

# --- –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ---
async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.message.text.strip()
    data = user_data.get(user_id)

    if not data:
        return

    game = data.get("game")

        # üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
    if game == "guess_number":
        if not message.isdigit():
            await update.message.reply_text("‚ùå  Zadej ƒç√≠slo.")
            return
        guess = int(message)
        number = data["number"]
        data["attempts"] += 1 
        if guess < number:
            await update.message.reply_text("üìâ P≈ô√≠li≈° m√°lo.")
        elif guess > number:
            await update.message.reply_text("üìà P≈ô√≠li≈° mnoho.")
        else:
            text = pluralizace_attempts(data["attempts"])
            await update.message.reply_text(f"üéâ Uh√°dl jsi za {text}!")
            user_data.pop(user_id)

    # üß† –ë–æ—Ç —É–≥–∞–¥—ã–≤–∞–µ—Ç
    elif game == "bot_guess":
        if message not in ["–±–æ–ª—å—à–µ", "–º–µ–Ω—å—à–µ", "—Ä–∞–≤–Ω–æ"]:
            await update.message.reply_text("‚ùå –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ `–±–æ–ª—å—à–µ`, `–º–µ–Ω—å—à–µ` –∏–ª–∏ `—Ä–∞–≤–Ω–æ`.")
            return
        guess = data["guess"]
        if message == "—Ä–∞–≤–Ω–æ":
            await update.message.reply_text(f"üéØ –Ø —É–≥–∞–¥–∞–ª! –≠—Ç–æ {guess}, –ø–æ–ø—ã—Ç–æ–∫: {data['attempts']}")
            user_data.pop(user_id)
        elif message == "–±–æ–ª—å—à–µ":
            data["low"] = guess + 1
            await make_bot_guess(update)
        elif message == "–º–µ–Ω—å—à–µ":
            data["high"] = guess - 1
            await make_bot_guess(update)

    # üîê –í–∑–ª–æ–º –ø–∞—Ä–æ–ª—è
    elif game == "password":
        if not message.isdigit() or len(message) != 4:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã.")
            return
        password = data["password"]
        data["attempts"] += 1
        correct_digits, correct_pos = check_password(message, password)
        if correct_pos == 4:
            await update.message.reply_text(f"üéâ –í–∑–ª–æ–º —É—Å–ø–µ—à–µ–Ω! –ö–æ–¥ –±—ã–ª {password}. –ü–æ–ø—ã—Ç–æ–∫: {data['attempts']}")
            user_data.pop(user_id)
        else:
            await update.message.reply_text(f"‚úÖ –¶–∏—Ñ—Ä —É–≥–∞–¥–∞–Ω–æ: {correct_digits}, –Ω–∞ –º–µ—Å—Ç–µ: {correct_pos}")

        


# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, guess))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()



if __name__ == '__main__':
    main()

